fdescribe("day22", () => {
   describe("Part 1", () => {
      it('should return list of cubes in cuboid', () => {
         expect(getCubesInCuboid({
            op: 'on',
            x: [10, 12],
            y: [10, 12],
            z: [10, 12],
         })).toEqual([
            '10,10,10',
            '10,10,11',
            '10,10,12',
            '10,11,10',
            '10,11,11',
            '10,11,12',
            '10,12,10',
            '10,12,11',
            '10,12,12',
            '11,10,10',
            '11,10,11',
            '11,10,12',
            '11,11,10',
            '11,11,11',
            '11,11,12',
            '11,12,10',
            '11,12,11',
            '11,12,12',
            '12,10,10',
            '12,10,11',
            '12,10,12',
            '12,11,10',
            '12,11,11',
            '12,11,12',
            '12,12,10',
            '12,12,11',
            '12,12,12',
         ])

         expect(getCubesInCuboid({
            op: 'on',
            x: [12, 10],
            y: [12, 10],
            z: [12, 10],
         })).toEqual([
            '10,10,10',
            '10,10,11',
            '10,10,12',
            '10,11,10',
            '10,11,11',
            '10,11,12',
            '10,12,10',
            '10,12,11',
            '10,12,12',
            '11,10,10',
            '11,10,11',
            '11,10,12',
            '11,11,10',
            '11,11,11',
            '11,11,12',
            '11,12,10',
            '11,12,11',
            '11,12,12',
            '12,10,10',
            '12,10,11',
            '12,10,12',
            '12,11,10',
            '12,11,11',
            '12,11,12',
            '12,12,10',
            '12,12,11',
            '12,12,12',
         ])
      });

      it('should return number of cuboids left on_small sample', () => {
         expect(getCuboidsLeftOn([{
            op: 'on',
            x: [10, 12],
            y: [10, 12],
            z: [10, 12],
         }, {
            op: 'on',
            x: [11, 13],
            y: [11, 13],
            z: [11, 13],
         }])).toEqual(27 + 19);

         expect(getCuboidsLeftOn([{
            op: 'on',
            x: [10, 12],
            y: [10, 12],
            z: [10, 12],
         }, {
            op: 'on',
            x: [11, 13],
            y: [11, 13],
            z: [11, 13],
         }, {
            op: 'off',
            x: [9, 11],
            y: [9, 11],
            z: [9, 11],
         }])).toEqual(27 + 19 - 8);

         expect(getCuboidsLeftOn(sampleInputManualParse)).toEqual(39);
      });

      it('should return number of cuboids left part1PuzzleInput', () => {
         expect(getCuboidsLeftOn(part1PuzzleInput)).toEqual(39);
      });
   });
   describe("Part 2", () => {

   });

   let sampleInputManualParse = [
      {
         op: 'on',
         x: [10, 12],
         y: [10, 12],
         z: [10, 12],
      }, {
         op: 'on',
         x: [11, 13],
         y: [11, 13],
         z: [11, 13],
      }, {
         op: 'off',
         x: [9, 11],
         y: [9, 11],
         z: [9, 11],
      }, {
         op: 'on',
         x: [10, 10],
         y: [10, 10],
         z: [10, 10]
      }
   ]

   let part1PuzzleInput = [
      {
         op: 'on',
         x: [-45, 0,], y: [-44, 9], z: [-39, 10],
      }, {
         op: 'on',
         x: [-22, 26,], y: [-21, 25], z: [-2, 43],
      }, {
         op: 'on',
         x: [-17, 35,], y: [-35, 15], z: [-27, 25],
      }, {
         op: 'on',
         x: [-10, 38,], y: [-46, 6], z: [-19, 31],
      }, {
         op: 'on',
         x: [-19, 28,], y: [-48, 4], z: [-47, 4],
      }, {
         op: 'on',
         x: [-12, 41,], y: [-45, 7], z: [-47, 1],
      }, {
         op: 'on',
         x: [-31, 15,], y: [-49, -1], z: [-18, 30],
      }, {
         op: 'on',
         x: [-15, 32,], y: [-36, 12], z: [-12, 33],
      }, {
         op: 'on',
         x: [-47, 2,], y: [-35, 12], z: [-9, 37],
      }, {
         op: 'on',
         x: [-8, 39,], y: [-41, 10], z: [-1, 45],
      }, {
         op: 'off',
         x: [26, 43,], y: [-37, -18], z: [28, 37],
      }, {
         op: 'on',
         x: [-12, 34,], y: [-29, 22], z: [-17, 35],
      }, {
         op: 'off',
         x: [-14, -5,], y: [27, 39], z: [8, 19],
      }, {
         op: 'on',
         x: [-29, 25,], y: [-36, 9], z: [-7, 37],
      }, {
         op: 'off',
         x: [-5, 13,], y: [27, 41], z: [-2, 13],
      }, {
         op: 'on',
         x: [-3, 47,], y: [-33, 16], z: [-29, 20],
      }, {
         op: 'off',
         x: [33, 46,], y: [-26, -13], z: [-21, -3],
      }, {
         op: 'on',
         x: [-36, 16,], y: [-33, 17], z: [-7, 42],
      }, {
         op: 'off',
         x: [-20, -10,], y: [-25, -10], z: [-11, 6],
      }, {
         op: 'on',
         x: [-32, 17,], y: [-2, 42], z: [-5, 41],
      }]
});