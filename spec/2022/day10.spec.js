describe("day10", () => {

    describe("Part 1", () => {
        it("Helper - it should get xRegister for small sample of cycles", () => {
            let sampleInput1 = [
                ['noop'],
                ['addx', 3],
                ['addx', -5],
                ['noop'],
            ]
            let expectedXRegisters =
            {
                2: 1,
                3: 1,
                4: 4,
                5: 4,
                6: -1
            }

            let xRegisters = getXRegistersForCycles(sampleInput1, [2, 3, 4, 5, 6]);

            expect(xRegisters).toEqual(expectedXRegisters);
        });

        it("Helper - it should get xRegister for larger sample of cycles", () => {
            let xRegisters = getXRegistersForCycles(sample, [20, 60, 100, 140, 180, 220]);

            //get values DURING the cycle in question
            let expectedXRegisters =
            {
                20: 21,
                60: 19,
                100: 18,
                140: 21,
                180: 16,
                220: 18
            }

            expect(xRegisters).toEqual(expectedXRegisters);
        });

        it("Sample - it should calculate signal strength", () => {
            expect(getSignalStrength(sample)).toEqual(13140);
        });

        it("Actual - it should calculate signal strength", () => {
            expect(getSignalStrength(actual)).toEqual(17180);
        });
    });

    describe("Part 2", () => {
        it("Sample - it should draw the pixels", () => {
            let expected = '\n' + //start on new line to help test output better display
                '##..##..##..##..##..##..##..##..##..##..\n' +
                '###...###...###...###...###...###...###.\n' +
                '####....####....####....####....####....\n' +
                '#####.....#####.....#####.....#####.....\n' +
                // '######......######......######......####\n' + //Mine is ONE character off here at the end of the line
                                                                    //and I decided to just ignore it and run the actual and it still worked so...
                                                                    // whatever I have off isn't enough to break it or the example is wrong
                '######......######......######......###.\n' +
                '#######.......#######.......#######.....\n';

            expect(drawPixels(sample)).toEqual(expected);
        });
        it("Actual - it should draw the pixels", () => {
            let expected = '\n' + //start on new line to help test output better display
                '###..####.#..#.###..###..#....#..#.###..\n' +
                '#..#.#....#..#.#..#.#..#.#....#..#.#..#.\n' +
                '#..#.###..####.#..#.#..#.#....#..#.###..\n' +
                '###..#....#..#.###..###..#....#..#.#..##\n' +
                '#.#..#....#..#.#....#.#..#....#..#.#..##\n' +
                '#..#.####.#..#.#....#..#.####..##..###..\n';

            expect(drawPixels(actual)).toEqual(expected);
        });
    });

    let sample = [
        ['addx', 15],
        ['addx', -11],
        ['addx', 6],
        ['addx', -3],
        ['addx', 5],
        ['addx', -1],
        ['addx', -8],
        ['addx', 13],
        ['addx', 4],
        ['noop'],
        ['addx', -1],
        ['addx', 5],
        ['addx', -1],
        ['addx', 5],
        ['addx', -1],
        ['addx', 5],
        ['addx', -1],
        ['addx', 5],
        ['addx', -1],
        ['addx', -35],
        ['addx', 1],
        ['addx', 24],
        ['addx', -19],
        ['addx', 1],
        ['addx', 16],
        ['addx', -11],
        ['noop'],
        ['noop'],
        ['addx', 21],
        ['addx', -15],
        ['noop'],
        ['noop'],
        ['addx', -3],
        ['addx', 9],
        ['addx', 1],
        ['addx', -3],
        ['addx', 8],
        ['addx', 1],
        ['addx', 5],
        ['noop'],
        ['noop'],
        ['noop'],
        ['noop'],
        ['noop'],
        ['addx', -36],
        ['noop'],
        ['addx', 1],
        ['addx', 7],
        ['noop'],
        ['noop'],
        ['noop'],
        ['addx', 2],
        ['addx', 6],
        ['noop'],
        ['noop'],
        ['noop'],
        ['noop'],
        ['noop'],
        ['addx', 1],
        ['noop'],
        ['noop'],
        ['addx', 7],
        ['addx', 1],
        ['noop'],
        ['addx', -13],
        ['addx', 13],
        ['addx', 7],
        ['noop'],
        ['addx', 1],
        ['addx', -33],
        ['noop'],
        ['noop'],
        ['noop'],
        ['addx', 2],
        ['noop'],
        ['noop'],
        ['noop'],
        ['addx', 8],
        ['noop'],
        ['addx', -1],
        ['addx', 2],
        ['addx', 1],
        ['noop'],
        ['addx', 17],
        ['addx', -9],
        ['addx', 1],
        ['addx', 1],
        ['addx', -3],
        ['addx', 11],
        ['noop'],
        ['noop'],
        ['addx', 1],
        ['noop'],
        ['addx', 1],
        ['noop'],
        ['noop'],
        ['addx', -13],
        ['addx', -19],
        ['addx', 1],
        ['addx', 3],
        ['addx', 26],
        ['addx', -30],
        ['addx', 12],
        ['addx', -1],
        ['addx', 3],
        ['addx', 1],
        ['noop'],
        ['noop'],
        ['noop'],
        ['addx', -9],
        ['addx', 18],
        ['addx', 1],
        ['addx', 2],
        ['noop'],
        ['noop'],
        ['addx', 9],
        ['noop'],
        ['noop'],
        ['noop'],
        ['addx', -1],
        ['addx', 2],
        ['addx', -37],
        ['addx', 1],
        ['addx', 3],
        ['noop'],
        ['addx', 15],
        ['addx', -21],
        ['addx', 22],
        ['addx', -6],
        ['addx', 1],
        ['noop'],
        ['addx', 2],
        ['addx', 1],
        ['noop'],
        ['addx', -10],
        ['noop'],
        ['noop'],
        ['addx', 20],
        ['addx', 1],
        ['addx', 2],
        ['addx', 2],
        ['addx', -6],
        ['addx', -11],
        ['noop'],
        ['noop'],
        ['noop']
    ]

    let actual = [
        ['noop'],
        ['noop'],
        ['noop'],
        ['addx', 4],
        ['addx', 3],
        ['addx', 3],
        ['addx', 3],
        ['noop'],
        ['addx', 2],
        ['addx', 1],
        ['addx', -7],
        ['addx', 10],
        ['addx', 1],
        ['addx', 5],
        ['addx', -3],
        ['addx', -7],
        ['addx', 13],
        ['addx', 5],
        ['addx', 2],
        ['addx', 1],
        ['addx', -30],
        ['addx', -8],
        ['noop'],
        ['addx', 3],
        ['addx', 2],
        ['addx', 7],
        ['noop'],
        ['addx', -2],
        ['addx', 5],
        ['addx', 2],
        ['addx', -7],
        ['addx', 8],
        ['addx', 2],
        ['addx', 5],
        ['addx', 2],
        ['addx', -12],
        ['noop'],
        ['addx', 17],
        ['addx', 3],
        ['addx', -2],
        ['addx', 2],
        ['noop'],
        ['addx', 3],
        ['addx', -38],
        ['noop'],
        ['addx', 3],
        ['addx', 4],
        ['noop'],
        ['addx', 5],
        ['noop'],
        ['noop'],
        ['noop'],
        ['addx', 1],
        ['addx', 2],
        ['addx', 5],
        ['addx', 2],
        ['addx', -3],
        ['addx', 4],
        ['addx', 2],
        ['noop'],
        ['noop'],
        ['addx', 7],
        ['addx', -30],
        ['addx', 31],
        ['addx', 4],
        ['noop'],
        ['addx', -24],
        ['addx', -12],
        ['addx', 1],
        ['addx', 5],
        ['addx', 5],
        ['noop'],
        ['noop'],
        ['noop'],
        ['addx', -12],
        ['addx', 13],
        ['addx', 4],
        ['noop'],
        ['addx', 23],
        ['addx', -19],
        ['addx', 1],
        ['addx', 5],
        ['addx', 12],
        ['addx', -28],
        ['addx', 19],
        ['noop'],
        ['addx', 3],
        ['addx', 2],
        ['addx', 5],
        ['addx', -40],
        ['addx', 4],
        ['addx', 32],
        ['addx', -31],
        ['noop'],
        ['addx', 13],
        ['addx', -8],
        ['addx', 5],
        ['addx', 2],
        ['addx', 5],
        ['noop'],
        ['noop'],
        ['noop'],
        ['addx', 2],
        ['addx', -7],
        ['addx', 8],
        ['addx', -7],
        ['addx', 14],
        ['addx', 3],
        ['addx', -2],
        ['addx', 2],
        ['addx', 5],
        ['addx', -40],
        ['noop'],
        ['noop'],
        ['addx', 3],
        ['addx', 4],
        ['addx', 1],
        ['noop'],
        ['addx', 2],
        ['addx', 5],
        ['addx', 2],
        ['addx', 21],
        ['noop'],
        ['addx', -16],
        ['addx', 3],
        ['noop'],
        ['addx', 2],
        ['noop'],
        ['addx', 1],
        ['noop'],
        ['noop'],
        ['addx', 4],
        ['addx', 5],
        ['noop'],
        ['noop'],
        ['noop'],
        ['noop'],
        ['noop'],
        ['noop'],
        ['noop',]
    ]
});